var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#predict","page":"API","title":"predict","text":"","category":"section"},{"location":"api/#PyBoltz.predict","page":"API","title":"PyBoltz.predict","text":"predict(input, [output_type]; options...)\n\nRun Boltz-1 prediction with the given input, output type, and options.\n\nInput types\n\nAbstractString: Path to a FASTA/YAML file or directory (for batching).\nBoltzInput: A single PyBoltz.Schema.BoltzInput object.\nVector{BoltzInput}: A vector of PyBoltz.Schema.BoltzInput objects for batching.\n\nOutput types\n\nBy default, raw results will be written to disk in the out_dir directory (see options).\n\nFor convenience, output_type can be provided as a second argument to reduce manual file I/O.\n\nIf output_type is provided, the function will return a single object if a BoltzInput was provided as input, otherwise a vector if an AbstractString or Vector{BoltzInput} was provided.\n\nThe following output types are supported:\n\nBioStructures.MolecularStructure: a rich and robust representation of molecular structures.\nProteinChains.ProteinStructure: a flat and specialized representation of protein structures for convenience.\n\nOptions\n\nNumeric Options\n\ndevices::Integer: Number of devices to use. Default: 1.\nrecycling_steps::Integer: Number of recycling steps. Default: 3.\nsampling_steps::Integer: Number of sampling steps. Default: 200.\ndiffusion_samples::Integer: Number of diffusion samples. Default: 1.\nstep_scale::Float64: Step size related to temperature. Default: 1.638.\nnum_workers::Integer: Number of dataloader workers. Default: 2.\nseed::Integer: RNG seed; default: none.\n\nString Options\n\nout_dir::String: The path where to save the predictions.\ncache::String: The directory where to download the data and model.\n\nDefaults to a Scratch.jl-backed directory created at module init; call clear_cache() to reset it.\n\ncheckpoint::String: Optional checkpoint path; defaults to Boltz-1 model.\naccelerator::String: 'gpu', 'cpu', or 'tpu'. Default: 'gpu'.\noutput_format::String: 'pdb' or 'mmcif'. Default: 'mmcif'.\nmsa_server_url::String: MSA server URL; requires use_msa_server=true.\nmsa_pairing_strategy::String: 'greedy' or 'complete'; requires use_msa_server=true.\n\nBoolean Flags\n\nwrite_full_pae::Bool: Dump PAE to a npz file. Default: true.\nwrite_full_pde::Bool: Dump PDE to a npz file. Default: false.\noverride::Bool: Override existing predictions. Default: false.\nuse_msa_server::Bool: Use MMSeqs2 server for MSA generation. Default: false.\n\n\n\n\n\n","category":"function"},{"location":"api/#Schema-submodule","page":"API","title":"Schema submodule","text":"","category":"section"},{"location":"api/#PyBoltz.Schema.BoltzInput","page":"API","title":"PyBoltz.Schema.BoltzInput","text":"BoltzInput\n\nA dictionary object that can be written to a YAML file.\n\nImplemented according to the schema definition in the boltz documentation, allowing for easy in-memory construction of the schema.\n\nAdditions\n\nname is an optional argument that changes the name of the output file/structure.\nSequences passed to protein, dna, and rna get automatically converted to strings, so any type (e.g. BioSequences.BioSequence) that has sensible Base.string-conversion defined will work.\nmsa can be provided as a vector of sequences.\n\nExamples\n\nusing PyBoltz.Schema\n\ninput1 = BoltzInput(\n    name = \"example1\", # optional name YAML file (and thus output pdb/cif file)\n    sequences = [\n        protein(\n            id = [\"A\", \"B\"],\n            sequence = seq,\n            msa = [seq, other...] # or path to a3m file\n        ),\n        ligand(\n            id = [\"C\", \"D\"],\n            ccd = \"SAH\"\n        ),\n        ligand(\n            id = [\"E\", \"F\"],\n            smiles = \"N[C@@H](Cc1ccc(O)cc1)C(=O)O\"\n        )\n    ]\n)\n\ninput2 = BoltzInput(\n    sequences = [\n        protein(\n            id = [\"A1\"],\n            sequence = seq\n        ),\n        ligand(\n            id = [\"B1\"],\n            ccd = \"EKY\"\n        )\n    ],\n    constraints = [\n        pocket(\n            binder = \"B1\",\n            contacts = [ (\"B1\", 1), (\"A1\", 138) ]\n        )\n    ]\n)\n\n\n\n\n\n","category":"type"},{"location":"api/#Sequences","page":"API","title":"Sequences","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"The following sequence types go into the sequences vector keyword argument of BoltzInput.","category":"page"},{"location":"api/#PyBoltz.Schema.protein","page":"API","title":"PyBoltz.Schema.protein","text":"protein(; id, sequence, msa=nothing, modifications=nothing, cyclic=nothing)\n\nusing PyBoltz.Schema: protein\nprotein(id=\"A\", sequence=\"RHKDE\")\nprotein(id=[\"A\", \"B\"], sequence=\"RHKDE\")\nprotein(id=\"A\", sequence=\"RHKDE\", msa=\"path/to/msa.a3m\")\nprotein(id=\"A\", sequence=\"RHKDE\", msa=[\"RHKDE\", \"RHKDE\"])\nprotein(id=\"A\", sequence=\"RHKDE\", modifications=[(position=1, ccd=\"MSE\"), (position=5, ccd=\"MSE\")])\nprotein(id=\"A\", sequence=\"RHKDE\", cyclic=true)\n\n\n\n\n\n","category":"function"},{"location":"api/#PyBoltz.Schema.dna","page":"API","title":"PyBoltz.Schema.dna","text":"dna(; id, sequence)\n\nusing PyBoltz.Schema: dna\ndna(id=\"A\", sequence=\"GATTACA\")\ndna(id=[\"A\", \"B\"], sequence=\"GATTACA\")\ndna(id=\"A\", sequence=\"GATTACA\", modifications=[(position=2, ccd=\"6MA\"), (position=6, ccd=\"5MC\")]) # untested\ndna(id=\"A\", sequence=\"GATTACA\", cyclic=true)\n\n\n\n\n\n","category":"function"},{"location":"api/#PyBoltz.Schema.rna","page":"API","title":"PyBoltz.Schema.rna","text":"rna(; id, sequence)\n\nusing PyBoltz.Schema: rna\nrna(id=\"A\", sequence=\"GAUUACA\")\nrna(id=[\"A\", \"B\"], sequence=\"GAUUACA\")\nrna(id=\"A\", sequence=\"GAUUACA\", modifications=[(position=2, ccd=\"I\"), (position=3, ccd=\"PSU\")]) # untested\nrna(id=\"A\", sequence=\"GAUUACA\", cyclic=true)\n\n\n\n\n\n","category":"function"},{"location":"api/#PyBoltz.Schema.ligand","page":"API","title":"PyBoltz.Schema.ligand","text":"ligand(; id, smiles=nothing, ccd=nothing)\n\nusing PyBoltz.Schema: ligand\nligand(id=\"C\", smiles=\"C1=CC=CC=C1\")\nligand(id=[\"D\", \"E\"], ccd=\"SAH\")\n\n\n\n\n\n","category":"function"},{"location":"api/#Constraints","page":"API","title":"Constraints","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"The following constraint types go into the constraints vector keyword argument of BoltzInput.","category":"page"},{"location":"api/#PyBoltz.Schema.bond","page":"API","title":"PyBoltz.Schema.bond","text":"bond(; atom1, atom2)\n\nusing PyBoltz.Schema: bond\n# atom1 and atom2 are tuples of (chain_id, residue_index, atom_name)\nbond(atom1=(\"A\", 1, \"CA\"), atom2=(\"B\", 2, \"CA\"))\n\n\n\n\n\n","category":"function"},{"location":"api/#PyBoltz.Schema.pocket","page":"API","title":"PyBoltz.Schema.pocket","text":"pocket(; binder, contacts, max_distance=nothing)\n\nusing PyBoltz.Schema: pocket\n# binder is a chain_id\n# contacts is a vector of vectors of (chain_id, residue_index)\npocket(binder=\"A\", contacts=[(\"B\", 1), (\"C\", 2)])\n\n\n\n\n\n","category":"function"},{"location":"api/#PyBoltz.Schema.contact","page":"API","title":"PyBoltz.Schema.contact","text":"contact(; token1, token2, max_distance=nothing)\n\n\n\n\n\n","category":"function"},{"location":"api/#Templates","page":"API","title":"Templates","text":"","category":"section"},{"location":"api/#PyBoltz.Schema.template","page":"API","title":"PyBoltz.Schema.template","text":"template(; cif, chain_id=nothing, template_id=nothing)\n\n\n\n\n\n","category":"function"},{"location":"api/#Properties","page":"API","title":"Properties","text":"","category":"section"},{"location":"api/#PyBoltz.Schema.affinity","page":"API","title":"PyBoltz.Schema.affinity","text":"affinity(; binder)\n\n\n\n\n\n","category":"function"},{"location":"#PyBoltz","page":"Home","title":"PyBoltz","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for PyBoltz.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg\npkg\"add PyBoltz\"","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"index.md\",\n    \"api.md\"\n]","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
